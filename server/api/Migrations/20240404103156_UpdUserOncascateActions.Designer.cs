// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Helpers;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240404103156_UpdUserOncascateActions")]
    partial class UpdUserOncascateActions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("api.Model.Entity.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Entry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Exit")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsPresent")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("api.Model.Entity.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("MetaName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MetaName")
                        .IsUnique();

                    b.ToTable("Configuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "mail",
                            Description = "server stmp",
                            MetaName = "mail_stmp_server",
                            Value = "{\"Server\":\"sandbox.smtp.mailtrap.io\",\"UserName\":\"de35ddf5383c06\",\"Port\":587,\"SenderEmail\":\"dev@marcatempo.it\",\"SenderName\":\"dev marcatempo\",\"Password\":\"ff133f4a7a43aa\"}"
                        });
                });

            modelBuilder.Entity("api.Model.Entity.Giustification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Giustifications");
                });

            modelBuilder.Entity("api.Model.Entity.QRcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("QRcodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 55, 964, DateTimeKind.Local).AddTicks(7045),
                            Token = "81a130d2-502f-4cf1-a376-63edeb000e9f",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 55, 964, DateTimeKind.Local).AddTicks(7049),
                            Token = "67c5064b-7160-4d05-a62e-1799f0d13270",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 55, 964, DateTimeKind.Local).AddTicks(7068),
                            Token = "5157e300-7181-4a23-81ac-33c36f5a003d",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 55, 964, DateTimeKind.Local).AddTicks(7070),
                            Token = "2f5604ca-b63a-48fd-8796-45dcb0e27a54",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 55, 964, DateTimeKind.Local).AddTicks(7072),
                            Token = "dfad9ed0-a375-45ad-956b-f44f7d401f42",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 55, 964, DateTimeKind.Local).AddTicks(7074),
                            Token = "1e6bb8ff-98ec-4d1c-96e3-0dd48fa6745f",
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 55, 964, DateTimeKind.Local).AddTicks(7090),
                            Token = "50501ee0-2e23-441f-ba21-02c8f13b90d2",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 55, 964, DateTimeKind.Local).AddTicks(7092),
                            Token = "7beb4bb7-8c5b-4b2b-aefd-a51155dbda32",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 55, 964, DateTimeKind.Local).AddTicks(7094),
                            Token = "a3ca7c38-b754-4b66-bfb7-59915796b405",
                            UserId = 10
                        });
                });

            modelBuilder.Entity("api.Model.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All Permission",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Only marking and show",
                            Name = "Operator"
                        });
                });

            modelBuilder.Entity("api.Model.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 54, 666, DateTimeKind.Local).AddTicks(7725),
                            DateOfBirth = new DateTime(2024, 4, 4, 12, 31, 54, 666, DateTimeKind.Local).AddTicks(7772),
                            Email = "admin@mail.com",
                            FirstName = "admin",
                            LastName = "admin",
                            LoginAttempts = 0,
                            Password = "$2a$11$OQGFpkeJiBiv.NPJNbGmweNhMUGXgopMWQKa0AMVUDQMgVkhlA85m",
                            RoleId = 1,
                            Username = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 54, 810, DateTimeKind.Local).AddTicks(2662),
                            DateOfBirth = new DateTime(2024, 4, 4, 12, 31, 54, 810, DateTimeKind.Local).AddTicks(2719),
                            Email = "operator@mail.com",
                            FirstName = "operator",
                            LastName = "operator",
                            LoginAttempts = 0,
                            Password = "$2a$11$cLQkDN/QIB5Wb9hKP5EFwOpMLVwW0QH3d.BfERT/BwOVu.00/nKQO",
                            RoleId = 2,
                            Username = "Operator"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 54, 954, DateTimeKind.Local).AddTicks(6617),
                            DateOfBirth = new DateTime(2024, 4, 4, 12, 31, 54, 954, DateTimeKind.Local).AddTicks(6678),
                            Email = "pippo@mail.com",
                            FirstName = "Jonh",
                            LastName = "Doe",
                            LoginAttempts = 0,
                            Password = "$2a$11$U.KCDLqhEmMgKaU7.e/uPuUrGQJevkHbaBXBjhO8SZK7plFNhfc4q",
                            RoleId = 2,
                            Username = "Pippo"
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 55, 99, DateTimeKind.Local).AddTicks(4004),
                            DateOfBirth = new DateTime(2024, 4, 4, 12, 31, 55, 99, DateTimeKind.Local).AddTicks(4032),
                            Email = "russel@howell.us",
                            FirstName = "Lilyan",
                            LastName = "Towne",
                            LoginAttempts = 0,
                            Password = "$2a$11$p4IsE5UJUtI.MXXUodtLTOurvKJv/pemaCLg6n25Bxc7WhgdkntXm",
                            RoleId = 2,
                            Username = "schuyler"
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 55, 243, DateTimeKind.Local).AddTicks(5429),
                            DateOfBirth = new DateTime(2024, 4, 4, 12, 31, 55, 243, DateTimeKind.Local).AddTicks(5568),
                            Email = "allan@pouros.name",
                            FirstName = "Maybell",
                            LastName = "Wiza",
                            LoginAttempts = 0,
                            Password = "$2a$11$uY/HboDoTsScNYila.DpSuI7kL3FTrEj1E6HKoTfEvcwVRZ5tVR6y",
                            RoleId = 2,
                            Username = "garry_swaniawski"
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 55, 388, DateTimeKind.Local).AddTicks(6294),
                            DateOfBirth = new DateTime(2024, 4, 4, 12, 31, 55, 388, DateTimeKind.Local).AddTicks(6320),
                            Email = "kailyn_jewess@crona.name",
                            FirstName = "Lexie",
                            LastName = "Hirthe",
                            LoginAttempts = 0,
                            Password = "$2a$11$oyCV1oeP/4cx0WZEZE3pzuoZQ/eP7YpIytuFWo0vkeQoMqSSMkMFS",
                            RoleId = 2,
                            Username = "lee_reichel"
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 55, 534, DateTimeKind.Local).AddTicks(703),
                            DateOfBirth = new DateTime(2024, 4, 4, 12, 31, 55, 534, DateTimeKind.Local).AddTicks(723),
                            Email = "oral@dietrich.biz",
                            FirstName = "Lambert",
                            LastName = "Zulauf",
                            LoginAttempts = 0,
                            Password = "$2a$11$hNHhzjtOCXuGwpQG3YQK.OJStPOC4x96by09l6J1LCk/9BKaaPe/6",
                            RoleId = 2,
                            Username = "jarret_stanton"
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 55, 677, DateTimeKind.Local).AddTicks(3144),
                            DateOfBirth = new DateTime(2024, 4, 4, 12, 31, 55, 677, DateTimeKind.Local).AddTicks(3162),
                            Email = "dock@moen.co.uk",
                            FirstName = "Alverta",
                            LastName = "Lubowitz",
                            LoginAttempts = 0,
                            Password = "$2a$11$vogFcvt2ATSZSI2s/a12pOVwIWuXDGGkgYxq0cwRyC1Z4CLrsvOxy",
                            RoleId = 2,
                            Username = "phoebe"
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 55, 820, DateTimeKind.Local).AddTicks(8410),
                            DateOfBirth = new DateTime(2024, 4, 4, 12, 31, 55, 820, DateTimeKind.Local).AddTicks(8430),
                            Email = "jerad@macejkovic.info",
                            FirstName = "Meredith",
                            LastName = "Deckow",
                            LoginAttempts = 0,
                            Password = "$2a$11$bG2Rt76LuQHJtH/mij.NM.gA0mPmbEkNupCiYu5./tNWYSz0Qgqwu",
                            RoleId = 2,
                            Username = "marietta_emmerich"
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTime(2024, 4, 4, 12, 31, 55, 964, DateTimeKind.Local).AddTicks(6652),
                            DateOfBirth = new DateTime(2024, 4, 4, 12, 31, 55, 964, DateTimeKind.Local).AddTicks(6671),
                            Email = "dorthy.volkman@blick.ca",
                            FirstName = "Parker",
                            LastName = "Walsh",
                            LoginAttempts = 0,
                            Password = "$2a$11$zhKpKIHrw4Z60l.RO2Agsea7oiZyC4XQwHnoKnnpwuVlNuTER5YRm",
                            RoleId = 2,
                            Username = "joan"
                        });
                });

            modelBuilder.Entity("api.Model.Entity.UserMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Metalabel")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMetas");
                });

            modelBuilder.Entity("api.Model.Entity.Action", b =>
                {
                    b.HasOne("api.Model.Entity.User", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Model.Entity.QRcode", b =>
                {
                    b.HasOne("api.Model.Entity.User", "User")
                        .WithOne("QRCode")
                        .HasForeignKey("api.Model.Entity.QRcode", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Model.Entity.User", b =>
                {
                    b.HasOne("api.Model.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("api.Model.Entity.UserMeta", b =>
                {
                    b.HasOne("api.Model.Entity.User", "User")
                        .WithMany("UserMetas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Model.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("api.Model.Entity.User", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("QRCode");

                    b.Navigation("UserMetas");
                });
#pragma warning restore 612, 618
        }
    }
}
