// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Helpers;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240319143711_loginAttempts")]
    partial class loginAttempts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("api.Model.Entity.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Entry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Exit")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsPresent")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("api.Model.Entity.Giustification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Giustifications");
                });

            modelBuilder.Entity("api.Model.Entity.QRcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("QRcodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 11, 81, DateTimeKind.Local).AddTicks(1376),
                            Token = "81a130d2-502f-4cf1-a376-63edeb000e9f",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 11, 81, DateTimeKind.Local).AddTicks(1381),
                            Token = "67c5064b-7160-4d05-a62e-1799f0d13270",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 11, 81, DateTimeKind.Local).AddTicks(1417),
                            Token = "02fbaf49-3470-443d-928c-092007b4f1ae",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 11, 81, DateTimeKind.Local).AddTicks(1419),
                            Token = "4eb648b3-bc09-4742-b01e-ccf78ed69839",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 11, 81, DateTimeKind.Local).AddTicks(1421),
                            Token = "36c0e3c4-235d-44fc-b7d0-b6c165957375",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 11, 81, DateTimeKind.Local).AddTicks(1423),
                            Token = "010cadcb-8fd3-4872-acfd-5fcac7018e55",
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 11, 81, DateTimeKind.Local).AddTicks(1425),
                            Token = "a780671c-3855-42b6-8088-a12efb6228d8",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 11, 81, DateTimeKind.Local).AddTicks(1427),
                            Token = "5fa2e984-3c85-461a-85f2-47434d1e68f6",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 11, 81, DateTimeKind.Local).AddTicks(1428),
                            Token = "aabc185f-ef4d-49d6-a138-f7820f253449",
                            UserId = 10
                        });
                });

            modelBuilder.Entity("api.Model.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All Permission",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Only marking and show",
                            Name = "Operator"
                        });
                });

            modelBuilder.Entity("api.Model.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 9, 762, DateTimeKind.Local).AddTicks(5455),
                            DateOfBirth = new DateTime(2024, 3, 19, 15, 37, 9, 762, DateTimeKind.Local).AddTicks(5509),
                            Email = "admin@mail.com",
                            FirstName = "admin",
                            LastName = "admin",
                            LoginAttempts = 0,
                            Password = "$2a$11$OQGFpkeJiBiv.NPJNbGmweNhMUGXgopMWQKa0AMVUDQMgVkhlA85m",
                            RoleId = 1,
                            Username = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 9, 909, DateTimeKind.Local).AddTicks(4185),
                            DateOfBirth = new DateTime(2024, 3, 19, 15, 37, 9, 909, DateTimeKind.Local).AddTicks(4227),
                            Email = "operator@mail.com",
                            FirstName = "operator",
                            LastName = "operator",
                            LoginAttempts = 0,
                            Password = "$2a$11$dZ1PPWuYaKBOjt7RCFv/ieZuzlXQaAMv4zwdlRXsLVHIfI1FI0s0C",
                            RoleId = 2,
                            Username = "Operator"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 10, 56, DateTimeKind.Local).AddTicks(5105),
                            DateOfBirth = new DateTime(2024, 3, 19, 15, 37, 10, 56, DateTimeKind.Local).AddTicks(5167),
                            Email = "pippo@mail.com",
                            FirstName = "Jonh",
                            LastName = "Doe",
                            LoginAttempts = 0,
                            Password = "$2a$11$2M60daQ8FTtBe9j53748DutnNBYZEPkFh.wPW4ncUW41Uy1ptZ2yG",
                            RoleId = 2,
                            Username = "Pippo"
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 10, 203, DateTimeKind.Local).AddTicks(1098),
                            DateOfBirth = new DateTime(2024, 3, 19, 15, 37, 10, 203, DateTimeKind.Local).AddTicks(1173),
                            Email = "ursula_stark@medhursttromp.us",
                            FirstName = "Riley",
                            LastName = "Ward",
                            LoginAttempts = 0,
                            Password = "$2a$11$t6/6lBmbvLwTWNYW4I3AH.rBfJ5N8lfEDH/q06dGlbT.Mjy0wQ65a",
                            RoleId = 2,
                            Username = "george.thiel"
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 10, 347, DateTimeKind.Local).AddTicks(9833),
                            DateOfBirth = new DateTime(2024, 3, 19, 15, 37, 10, 347, DateTimeKind.Local).AddTicks(9853),
                            Email = "alexandrine@cummings.info",
                            FirstName = "Brenna",
                            LastName = "Skiles",
                            LoginAttempts = 0,
                            Password = "$2a$11$0yzsW4/i1FX0ZqS24ra6Fexo.pZSCerRQ6lvgvx.8MX8pSxnhIR0G",
                            RoleId = 2,
                            Username = "kristoffer"
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 10, 493, DateTimeKind.Local).AddTicks(6843),
                            DateOfBirth = new DateTime(2024, 3, 19, 15, 37, 10, 493, DateTimeKind.Local).AddTicks(6864),
                            Email = "chloe@mcclure.uk",
                            FirstName = "Zelda",
                            LastName = "Terry",
                            LoginAttempts = 0,
                            Password = "$2a$11$CUt3EM6u37LBBZ4dxEUsq.NHL2GqHKDnbzsrQNSqdXP5w9Mcn4G/y",
                            RoleId = 2,
                            Username = "keely_kling"
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 10, 640, DateTimeKind.Local).AddTicks(9590),
                            DateOfBirth = new DateTime(2024, 3, 19, 15, 37, 10, 640, DateTimeKind.Local).AddTicks(9610),
                            Email = "brenden_dickens@hintz.uk",
                            FirstName = "Marta",
                            LastName = "Stanton",
                            LoginAttempts = 0,
                            Password = "$2a$11$2T/YSIBjMqdaf6Bczj/q/./DDOcdemfxMiHS120oFtIdM6tfPVuqi",
                            RoleId = 2,
                            Username = "stefan"
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 10, 785, DateTimeKind.Local).AddTicks(9111),
                            DateOfBirth = new DateTime(2024, 3, 19, 15, 37, 10, 785, DateTimeKind.Local).AddTicks(9133),
                            Email = "troy@smith.info",
                            FirstName = "Yasmin",
                            LastName = "Ullrich",
                            LoginAttempts = 0,
                            Password = "$2a$11$1c/9vxuuWHoBXxBA76J2EOxl3Rs1J/k3KV3ISwBkgKgqfPpcJUU62",
                            RoleId = 2,
                            Username = "maurine"
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 10, 932, DateTimeKind.Local).AddTicks(103),
                            DateOfBirth = new DateTime(2024, 3, 19, 15, 37, 10, 932, DateTimeKind.Local).AddTicks(122),
                            Email = "jacques@carroll.uk",
                            FirstName = "Omer",
                            LastName = "Bernhard",
                            LoginAttempts = 0,
                            Password = "$2a$11$tNckGDIvmBVPrUvamkGJvu0Tk/lXauR3fvxq7h8/T53OgEesbgoeq",
                            RoleId = 2,
                            Username = "victor"
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTime(2024, 3, 19, 15, 37, 11, 81, DateTimeKind.Local).AddTicks(917),
                            DateOfBirth = new DateTime(2024, 3, 19, 15, 37, 11, 81, DateTimeKind.Local).AddTicks(937),
                            Email = "stephany.langosh@dooley.biz",
                            FirstName = "Reuben",
                            LastName = "Schiller",
                            LoginAttempts = 0,
                            Password = "$2a$11$8ALpWrikFBz9QW/QTYDl..c7mApmhw2a6TK15Ik.q5xNCqfqE4Hsa",
                            RoleId = 2,
                            Username = "stacy.herzog"
                        });
                });

            modelBuilder.Entity("api.Model.Entity.UserMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Metalabel")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMetas");
                });

            modelBuilder.Entity("api.Model.Entity.Action", b =>
                {
                    b.HasOne("api.Model.Entity.User", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Model.Entity.QRcode", b =>
                {
                    b.HasOne("api.Model.Entity.User", "User")
                        .WithOne("QRCode")
                        .HasForeignKey("api.Model.Entity.QRcode", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Model.Entity.User", b =>
                {
                    b.HasOne("api.Model.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("api.Model.Entity.UserMeta", b =>
                {
                    b.HasOne("api.Model.Entity.User", "User")
                        .WithMany("UserMetas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Model.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("api.Model.Entity.User", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("QRCode");

                    b.Navigation("UserMetas");
                });
#pragma warning restore 612, 618
        }
    }
}
