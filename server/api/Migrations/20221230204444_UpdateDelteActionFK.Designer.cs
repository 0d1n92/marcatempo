// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Helpers;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221230204444_UpdateDelteActionFK")]
    partial class UpdateDelteActionFK
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("api.Model.Entity.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Entry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Exit")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsPresent")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("api.Model.Entity.Giustification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Giustifications");
                });

            modelBuilder.Entity("api.Model.Entity.QRcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("QRcodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 44, 706, DateTimeKind.Local).AddTicks(91),
                            Token = "81a130d2-502f-4cf1-a376-63edeb000e9f",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 44, 706, DateTimeKind.Local).AddTicks(94),
                            Token = "67c5064b-7160-4d05-a62e-1799f0d13270",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 44, 706, DateTimeKind.Local).AddTicks(125),
                            Token = "753085f7-0900-4b76-9ba3-5992c1e7605e",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 44, 706, DateTimeKind.Local).AddTicks(127),
                            Token = "b65edeef-01bb-4419-ba88-e89e4124a801",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 44, 706, DateTimeKind.Local).AddTicks(129),
                            Token = "75c59376-3d67-447c-adc2-50dcb47954c0",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 44, 706, DateTimeKind.Local).AddTicks(130),
                            Token = "84268cdf-8e13-4fe4-a938-5c0f050e1fe1",
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 44, 706, DateTimeKind.Local).AddTicks(132),
                            Token = "f5e03bc7-306a-482c-9950-f099d911e8f0",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 44, 706, DateTimeKind.Local).AddTicks(134),
                            Token = "0ae939ae-1083-412a-9e91-5ed7e7e2d4c7",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 44, 706, DateTimeKind.Local).AddTicks(135),
                            Token = "74373076-5485-4791-a09f-63afcd7f87df",
                            UserId = 10
                        });
                });

            modelBuilder.Entity("api.Model.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All Permission",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Only marking and show",
                            Name = "Operator"
                        });
                });

            modelBuilder.Entity("api.Model.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 43, 407, DateTimeKind.Local).AddTicks(6660),
                            DateOfBirth = new DateTime(2022, 12, 30, 21, 44, 43, 407, DateTimeKind.Local).AddTicks(6707),
                            Email = "admin@mail.com",
                            FirstName = "admin",
                            LastName = "admin",
                            Password = "$2a$11$fbCDBRGE7WLFZQNk2raLk.JtXRLncrGB9dVHXwVUejXb12cLdYBTa",
                            RoleId = 1,
                            Username = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 43, 550, DateTimeKind.Local).AddTicks(8265),
                            DateOfBirth = new DateTime(2022, 12, 30, 21, 44, 43, 550, DateTimeKind.Local).AddTicks(8325),
                            Email = "operator@mail.com",
                            FirstName = "operator",
                            LastName = "operator",
                            Password = "$2a$11$97njbg7zgrpoQCD/fGKqiOE6ddB3eqjH252qKTsdMFfltx5hZuI/i",
                            RoleId = 2,
                            Username = "Operator"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 43, 696, DateTimeKind.Local).AddTicks(2722),
                            DateOfBirth = new DateTime(2022, 12, 30, 21, 44, 43, 696, DateTimeKind.Local).AddTicks(2755),
                            Email = "pippo@mail.com",
                            FirstName = "Jonh",
                            LastName = "Doe",
                            Password = "$2a$11$GJg7caCgdB3zJCy3h0.dque/q7Mo2ywhR842EgSUoh3LdPWh8MKnK",
                            RoleId = 2,
                            Username = "Pippo"
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 43, 840, DateTimeKind.Local).AddTicks(1403),
                            DateOfBirth = new DateTime(2022, 12, 30, 21, 44, 43, 840, DateTimeKind.Local).AddTicks(1503),
                            Email = "trevor_turner@romaguera.biz",
                            FirstName = "Jalyn",
                            LastName = "Pfeffer",
                            Password = "$2a$11$hu32FSh2N3wx0cUD1/8IzO4ow3hxHbqYOfERlpk0abMWUmzLgS2K2",
                            RoleId = 2,
                            Username = "kariane_deckow"
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 43, 983, DateTimeKind.Local).AddTicks(7902),
                            DateOfBirth = new DateTime(2022, 12, 30, 21, 44, 43, 983, DateTimeKind.Local).AddTicks(7918),
                            Email = "maeve_mccullough@goodwin.co.uk",
                            FirstName = "Vergie",
                            LastName = "Parker",
                            Password = "$2a$11$7S6t81/FC/DBezMtl89jEOUK.1r4ZMbVhFowTMR7ikMq3eveun6nq",
                            RoleId = 2,
                            Username = "issac"
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 44, 131, DateTimeKind.Local).AddTicks(3921),
                            DateOfBirth = new DateTime(2022, 12, 30, 21, 44, 44, 131, DateTimeKind.Local).AddTicks(3940),
                            Email = "liliana@roberts.us",
                            FirstName = "Marina",
                            LastName = "Ruecker",
                            Password = "$2a$11$TvtBwus8LoA4map/Quhr.OzIlQdMa6FfUYpIEXl6Q08BFPhh2wRLe",
                            RoleId = 2,
                            Username = "teresa_conn"
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 44, 274, DateTimeKind.Local).AddTicks(8602),
                            DateOfBirth = new DateTime(2022, 12, 30, 21, 44, 44, 274, DateTimeKind.Local).AddTicks(8617),
                            Email = "daron_marvin@hoegerhomenick.info",
                            FirstName = "Verona",
                            LastName = "Streich",
                            Password = "$2a$11$UzEtKjshRmUvffdO2r7qEu6T1TurXLUVUkYEFwWwxyaDNIuco6Uou",
                            RoleId = 2,
                            Username = "hester.beatty"
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 44, 418, DateTimeKind.Local).AddTicks(4377),
                            DateOfBirth = new DateTime(2022, 12, 30, 21, 44, 44, 418, DateTimeKind.Local).AddTicks(4396),
                            Email = "eloisa@gibson.ca",
                            FirstName = "Pauline",
                            LastName = "Kertzmann",
                            Password = "$2a$11$3lXF7kIQZqpLreOW4Edcl.IomnkIf7/9.1e52WPm3dhtZqFYclMWa",
                            RoleId = 2,
                            Username = "elliott.hoppe"
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 44, 561, DateTimeKind.Local).AddTicks(6507),
                            DateOfBirth = new DateTime(2022, 12, 30, 21, 44, 44, 561, DateTimeKind.Local).AddTicks(6531),
                            Email = "zoie@mckenziestracke.name",
                            FirstName = "Lawrence",
                            LastName = "Weissnat",
                            Password = "$2a$11$pjaPdU5.gO5SSnS0/7CyteDMTzDt1/tT/GFefNpac5jVAUOKGydC.",
                            RoleId = 2,
                            Username = "corine"
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTime(2022, 12, 30, 21, 44, 44, 705, DateTimeKind.Local).AddTicks(9619),
                            DateOfBirth = new DateTime(2022, 12, 30, 21, 44, 44, 705, DateTimeKind.Local).AddTicks(9638),
                            Email = "linnea@sengerhayes.ca",
                            FirstName = "Kaitlin",
                            LastName = "Zieme",
                            Password = "$2a$11$unM.th9y16A/TLJWC2SnAe2V1i43EYZU9XJCHqE/PxAyqI8QEcbDq",
                            RoleId = 2,
                            Username = "clotilde_swaniawski"
                        });
                });

            modelBuilder.Entity("api.Model.Entity.UserMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Metalabel")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMetas");
                });

            modelBuilder.Entity("api.Model.Entity.Action", b =>
                {
                    b.HasOne("api.Model.Entity.User", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Model.Entity.QRcode", b =>
                {
                    b.HasOne("api.Model.Entity.User", "User")
                        .WithOne("QRCode")
                        .HasForeignKey("api.Model.Entity.QRcode", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Model.Entity.User", b =>
                {
                    b.HasOne("api.Model.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("api.Model.Entity.UserMeta", b =>
                {
                    b.HasOne("api.Model.Entity.User", "User")
                        .WithMany("UserMetas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Model.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("api.Model.Entity.User", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("QRCode");

                    b.Navigation("UserMetas");
                });
#pragma warning restore 612, 618
        }
    }
}
