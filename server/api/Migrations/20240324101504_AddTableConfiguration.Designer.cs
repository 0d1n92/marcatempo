// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Helpers;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240324101504_AddTableConfiguration")]
    partial class AddTableConfiguration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("api.Model.Entity.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Entry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Exit")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsPresent")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("api.Model.Entity.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("MetaName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MetaName")
                        .IsUnique();

                    b.ToTable("Configuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "mail",
                            Description = "server stmp",
                            MetaName = "mail_stmp_server",
                            Value = "{\"Server\":\"sandbox.smtp.mailtrap.io\",\"UserName\":\"de35ddf5383c06\",\"Port\":587,\"SenderEmail\":\"dev@marcatempo.it\",\"SenderName\":\"dev marcatempo\",\"Password\":\"ff133f4a7a43aa\"}"
                        });
                });

            modelBuilder.Entity("api.Model.Entity.Giustification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Giustifications");
                });

            modelBuilder.Entity("api.Model.Entity.QRcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("QRcodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 3, 956, DateTimeKind.Local).AddTicks(4443),
                            Token = "81a130d2-502f-4cf1-a376-63edeb000e9f",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 3, 956, DateTimeKind.Local).AddTicks(4447),
                            Token = "67c5064b-7160-4d05-a62e-1799f0d13270",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 3, 956, DateTimeKind.Local).AddTicks(4470),
                            Token = "ffef9801-1862-41e3-adab-612df6d0c157",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 3, 956, DateTimeKind.Local).AddTicks(4471),
                            Token = "21b667a7-abdd-4b8e-bdf6-e2a691ba589e",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 3, 956, DateTimeKind.Local).AddTicks(4473),
                            Token = "2c7c080f-68fe-4f7b-a33b-8455dc88f991",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 3, 956, DateTimeKind.Local).AddTicks(4475),
                            Token = "ddb8c653-8f71-4815-ade2-27be679cb645",
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 3, 956, DateTimeKind.Local).AddTicks(4484),
                            Token = "b2e6efb5-2c02-460d-b3d8-502bb6fc0bdb",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 3, 956, DateTimeKind.Local).AddTicks(4486),
                            Token = "91db2bc0-c19f-4304-852a-7ff425fb5314",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 3, 956, DateTimeKind.Local).AddTicks(4493),
                            Token = "c147ec91-367d-4c9c-88ee-21f10390e3fa",
                            UserId = 10
                        });
                });

            modelBuilder.Entity("api.Model.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All Permission",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Only marking and show",
                            Name = "Operator"
                        });
                });

            modelBuilder.Entity("api.Model.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 2, 627, DateTimeKind.Local).AddTicks(817),
                            DateOfBirth = new DateTime(2024, 3, 24, 11, 15, 2, 627, DateTimeKind.Local).AddTicks(868),
                            Email = "admin@mail.com",
                            FirstName = "admin",
                            LastName = "admin",
                            LoginAttempts = 0,
                            Password = "$2a$11$OQGFpkeJiBiv.NPJNbGmweNhMUGXgopMWQKa0AMVUDQMgVkhlA85m",
                            RoleId = 1,
                            Username = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 2, 773, DateTimeKind.Local).AddTicks(9718),
                            DateOfBirth = new DateTime(2024, 3, 24, 11, 15, 2, 773, DateTimeKind.Local).AddTicks(9764),
                            Email = "operator@mail.com",
                            FirstName = "operator",
                            LastName = "operator",
                            LoginAttempts = 0,
                            Password = "$2a$11$00ULs4den20SRAIF0mBg1u7tEq2fUn8PGiqIvUVBIFmfh4E8VI0JW",
                            RoleId = 2,
                            Username = "Operator"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 2, 921, DateTimeKind.Local).AddTicks(4507),
                            DateOfBirth = new DateTime(2024, 3, 24, 11, 15, 2, 921, DateTimeKind.Local).AddTicks(4579),
                            Email = "pippo@mail.com",
                            FirstName = "Jonh",
                            LastName = "Doe",
                            LoginAttempts = 0,
                            Password = "$2a$11$oVwZ4LkLB29T8M/PuqCYyeV8wt5rmZM8eQ3QjVU0AGr9nr3g859UO",
                            RoleId = 2,
                            Username = "Pippo"
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 3, 68, DateTimeKind.Local).AddTicks(8406),
                            DateOfBirth = new DateTime(2024, 3, 24, 11, 15, 3, 68, DateTimeKind.Local).AddTicks(8436),
                            Email = "beatrice_borer@kuhn.biz",
                            FirstName = "Armani",
                            LastName = "Feest",
                            LoginAttempts = 0,
                            Password = "$2a$11$FJ2E1ND8SnKwzJdlzP4bc.rPrIdhrMvgaYCSBXPdEjJ5JnaJBq8DW",
                            RoleId = 2,
                            Username = "amanda"
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 3, 215, DateTimeKind.Local).AddTicks(9708),
                            DateOfBirth = new DateTime(2024, 3, 24, 11, 15, 3, 215, DateTimeKind.Local).AddTicks(9880),
                            Email = "leola@nicolas.us",
                            FirstName = "Nikko",
                            LastName = "Lehner",
                            LoginAttempts = 0,
                            Password = "$2a$11$HX4knnYK0NibNadeTXwx4.KpAOMI0zCY1xrIA.TAd6Q./1lXxabmi",
                            RoleId = 2,
                            Username = "carissa_flatley"
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 3, 362, DateTimeKind.Local).AddTicks(8152),
                            DateOfBirth = new DateTime(2024, 3, 24, 11, 15, 3, 362, DateTimeKind.Local).AddTicks(8178),
                            Email = "jack@sauervonrueden.com",
                            FirstName = "Delia",
                            LastName = "Keebler",
                            LoginAttempts = 0,
                            Password = "$2a$11$p0FkS4m56dHpL1sZlIrtSO66H75nQSYcUBEvayOu2AmruFwLbKw3e",
                            RoleId = 2,
                            Username = "dianna.funk"
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 3, 511, DateTimeKind.Local).AddTicks(6950),
                            DateOfBirth = new DateTime(2024, 3, 24, 11, 15, 3, 511, DateTimeKind.Local).AddTicks(6973),
                            Email = "sibyl@schaefermarquardt.co.uk",
                            FirstName = "Ila",
                            LastName = "O'Kon",
                            LoginAttempts = 0,
                            Password = "$2a$11$ooIhR2LOKajjC1udIv.WHOY4EzZI1dAPmBwoWuhmnbg5lgSgBYvA.",
                            RoleId = 2,
                            Username = "houston"
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 3, 662, DateTimeKind.Local).AddTicks(3363),
                            DateOfBirth = new DateTime(2024, 3, 24, 11, 15, 3, 662, DateTimeKind.Local).AddTicks(3385),
                            Email = "mayra@kuhicbechtelar.com",
                            FirstName = "Lesley",
                            LastName = "Dare",
                            LoginAttempts = 0,
                            Password = "$2a$11$VkRs0yTkWBqqGScQBHX6H.BzHWnVIpD2n3EouJw9MosOX.DVcpTxe",
                            RoleId = 2,
                            Username = "zoey"
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 3, 811, DateTimeKind.Local).AddTicks(1796),
                            DateOfBirth = new DateTime(2024, 3, 24, 11, 15, 3, 811, DateTimeKind.Local).AddTicks(1819),
                            Email = "uriel@gleichner.co.uk",
                            FirstName = "Ramona",
                            LastName = "Schaefer",
                            LoginAttempts = 0,
                            Password = "$2a$11$vfNlsms92vJuWMmqqSrwr.BAk/whitWdtBi5XsbjkBFANhmIZdkBC",
                            RoleId = 2,
                            Username = "norbert"
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTime(2024, 3, 24, 11, 15, 3, 956, DateTimeKind.Local).AddTicks(4015),
                            DateOfBirth = new DateTime(2024, 3, 24, 11, 15, 3, 956, DateTimeKind.Local).AddTicks(4033),
                            Email = "lowell_cummerata@streich.name",
                            FirstName = "Jaren",
                            LastName = "Jaskolski",
                            LoginAttempts = 0,
                            Password = "$2a$11$uggOX6uCzfh.7JO2MU1tYefJxlW0mD/0cnXdj7L34cXPu64Yu6qL.",
                            RoleId = 2,
                            Username = "clementine.goldner"
                        });
                });

            modelBuilder.Entity("api.Model.Entity.UserMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Metalabel")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMetas");
                });

            modelBuilder.Entity("api.Model.Entity.Action", b =>
                {
                    b.HasOne("api.Model.Entity.User", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Model.Entity.QRcode", b =>
                {
                    b.HasOne("api.Model.Entity.User", "User")
                        .WithOne("QRCode")
                        .HasForeignKey("api.Model.Entity.QRcode", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Model.Entity.User", b =>
                {
                    b.HasOne("api.Model.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("api.Model.Entity.UserMeta", b =>
                {
                    b.HasOne("api.Model.Entity.User", "User")
                        .WithMany("UserMetas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Model.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("api.Model.Entity.User", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("QRCode");

                    b.Navigation("UserMetas");
                });
#pragma warning restore 612, 618
        }
    }
}
